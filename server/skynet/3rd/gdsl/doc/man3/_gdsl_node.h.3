.TH "_gdsl_node.h" 3 "Wed Jun 12 2013" "Version 1.7" "gdsl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
_gdsl_node.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _gdsl_node * \fB_gdsl_node_t\fP"
.br
.RI "\fIGDSL low-level doubly linked node type\&. \fP"
.ti -1c
.RI "typedef int(* \fB_gdsl_node_map_func_t\fP )(const \fB_gdsl_node_t\fP NODE, void *USER_DATA)"
.br
.RI "\fIGDSL low-level doubly-linked node map function type\&. \fP"
.ti -1c
.RI "typedef void(* \fB_gdsl_node_write_func_t\fP )(const \fB_gdsl_node_t\fP NODE, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIGDSL low-level doubly-linked node write function type\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB_gdsl_node_t\fP \fB_gdsl_node_alloc\fP (void)"
.br
.RI "\fICreate a new low-level node\&. \fP"
.ti -1c
.RI "\fBgdsl_element_t\fP \fB_gdsl_node_free\fP (\fB_gdsl_node_t\fP NODE)"
.br
.RI "\fIDestroy a low-level node\&. \fP"
.ti -1c
.RI "\fB_gdsl_node_t\fP \fB_gdsl_node_get_succ\fP (const \fB_gdsl_node_t\fP NODE)"
.br
.RI "\fIGet the successor of a low-level node\&. \fP"
.ti -1c
.RI "\fB_gdsl_node_t\fP \fB_gdsl_node_get_pred\fP (const \fB_gdsl_node_t\fP NODE)"
.br
.RI "\fIGet the predecessor of a low-level node\&. \fP"
.ti -1c
.RI "\fBgdsl_element_t\fP \fB_gdsl_node_get_content\fP (const \fB_gdsl_node_t\fP NODE)"
.br
.RI "\fIGet the content of a low-level node\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_set_succ\fP (\fB_gdsl_node_t\fP NODE, const \fB_gdsl_node_t\fP SUCC)"
.br
.RI "\fISet the successor of a low-level node\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_set_pred\fP (\fB_gdsl_node_t\fP NODE, const \fB_gdsl_node_t\fP PRED)"
.br
.RI "\fISet the predecessor of a low-level node\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_set_content\fP (\fB_gdsl_node_t\fP NODE, const \fBgdsl_element_t\fP CONTENT)"
.br
.RI "\fISet the content of a low-level node\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_link\fP (\fB_gdsl_node_t\fP NODE1, \fB_gdsl_node_t\fP NODE2)"
.br
.RI "\fILink two low-level nodes together\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_unlink\fP (\fB_gdsl_node_t\fP NODE1, \fB_gdsl_node_t\fP NODE2)"
.br
.RI "\fIUnlink two low-level nodes\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_write\fP (const \fB_gdsl_node_t\fP NODE, const \fB_gdsl_node_write_func_t\fP WRITE_F, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIWrite a low-level node to a file\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_write_xml\fP (const \fB_gdsl_node_t\fP NODE, const \fB_gdsl_node_write_func_t\fP WRITE_F, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIWrite a low-level node to a file into XML\&. \fP"
.ti -1c
.RI "void \fB_gdsl_node_dump\fP (const \fB_gdsl_node_t\fP NODE, const \fB_gdsl_node_write_func_t\fP WRITE_F, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIDump the internal structure of a low-level node to a file\&. \fP"
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for gdsl from the source code\&.
