.TH "_gdsl_bstree.h" 3 "Wed Jun 12 2013" "Version 1.7" "gdsl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
_gdsl_bstree.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fB_gdsl_bintree_t\fP \fB_gdsl_bstree_t\fP"
.br
.RI "\fIGDSL low-level binary search tree type\&. \fP"
.ti -1c
.RI "typedef int(* \fB_gdsl_bstree_map_func_t\fP )(\fB_gdsl_bstree_t\fP TREE, void *USER_DATA)"
.br
.RI "\fIGDSL low-level binary search tree map function type\&. \fP"
.ti -1c
.RI "typedef void(* \fB_gdsl_bstree_write_func_t\fP )(\fB_gdsl_bstree_t\fP TREE, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIGDSL low-level binary search tree write function type\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_alloc\fP (const \fBgdsl_element_t\fP E)"
.br
.RI "\fICreate a new low-level binary search tree\&. \fP"
.ti -1c
.RI "void \fB_gdsl_bstree_free\fP (\fB_gdsl_bstree_t\fP T, const \fBgdsl_free_func_t\fP FREE_F)"
.br
.RI "\fIDestroy a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_copy\fP (const \fB_gdsl_bstree_t\fP T, const \fBgdsl_copy_func_t\fP COPY_F)"
.br
.RI "\fICopy a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fBbool\fP \fB_gdsl_bstree_is_empty\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fICheck if a low-level binary search tree is empty\&. \fP"
.ti -1c
.RI "\fBbool\fP \fB_gdsl_bstree_is_leaf\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fICheck if a low-level binary search tree is reduced to a leaf\&. \fP"
.ti -1c
.RI "\fBgdsl_element_t\fP \fB_gdsl_bstree_get_content\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fIGet the root content of a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fBbool\fP \fB_gdsl_bstree_is_root\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fICheck if a low-level binary search tree is a root\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_get_parent\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fIGet the parent tree of a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_get_left\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fIGet the left sub-tree of a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_get_right\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fIGet the right sub-tree of a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fBulong\fP \fB_gdsl_bstree_get_size\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fIGet the size of a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fBulong\fP \fB_gdsl_bstree_get_height\fP (const \fB_gdsl_bstree_t\fP T)"
.br
.RI "\fIGet the height of a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_insert\fP (\fB_gdsl_bstree_t\fP *T, const \fBgdsl_compare_func_t\fP COMP_F, const \fBgdsl_element_t\fP VALUE, int *RESULT)"
.br
.RI "\fIInsert an element into a low-level binary search tree if it's not found or return it\&. \fP"
.ti -1c
.RI "\fBgdsl_element_t\fP \fB_gdsl_bstree_remove\fP (\fB_gdsl_bstree_t\fP *T, const \fBgdsl_compare_func_t\fP COMP_F, const \fBgdsl_element_t\fP VALUE)"
.br
.RI "\fIRemove an element from a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_search\fP (const \fB_gdsl_bstree_t\fP T, const \fBgdsl_compare_func_t\fP COMP_F, const \fBgdsl_element_t\fP VALUE)"
.br
.RI "\fISearch for a particular element into a low-level binary search tree\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_search_next\fP (const \fB_gdsl_bstree_t\fP T, const \fBgdsl_compare_func_t\fP COMP_F, const \fBgdsl_element_t\fP VALUE)"
.br
.RI "\fISearch for the next element of a particular element into a low-level binary search tree, according to the binary search tree order\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_map_prefix\fP (const \fB_gdsl_bstree_t\fP T, const \fB_gdsl_bstree_map_func_t\fP MAP_F, void *USER_DATA)"
.br
.RI "\fIParse a low-level binary search tree in prefixed order\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_map_infix\fP (const \fB_gdsl_bstree_t\fP T, const \fB_gdsl_bstree_map_func_t\fP MAP_F, void *USER_DATA)"
.br
.RI "\fIParse a low-level binary search tree in infixed order\&. \fP"
.ti -1c
.RI "\fB_gdsl_bstree_t\fP \fB_gdsl_bstree_map_postfix\fP (const \fB_gdsl_bstree_t\fP T, const \fB_gdsl_bstree_map_func_t\fP MAP_F, void *USER_DATA)"
.br
.RI "\fIParse a low-level binary search tree in postfixed order\&. \fP"
.ti -1c
.RI "void \fB_gdsl_bstree_write\fP (const \fB_gdsl_bstree_t\fP T, const \fB_gdsl_bstree_write_func_t\fP WRITE_F, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIWrite the content of all nodes of a low-level binary search tree to a file\&. \fP"
.ti -1c
.RI "void \fB_gdsl_bstree_write_xml\fP (const \fB_gdsl_bstree_t\fP T, const \fB_gdsl_bstree_write_func_t\fP WRITE_F, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIWrite the content of a low-level binary search tree to a file into XML\&. \fP"
.ti -1c
.RI "void \fB_gdsl_bstree_dump\fP (const \fB_gdsl_bstree_t\fP T, const \fB_gdsl_bstree_write_func_t\fP WRITE_F, FILE *OUTPUT_FILE, void *USER_DATA)"
.br
.RI "\fIDump the internal structure of a low-level binary search tree to a file\&. \fP"
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for gdsl from the source code\&.
